{"/home/travis/build/npmtest/node-npmtest-include-all/test.js":"/* istanbul instrument in package npmtest_include_all */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-include-all/lib.npmtest_include_all.js":"/* istanbul instrument in package npmtest_include_all */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_include_all = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_include_all = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-include-all/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-include-all && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_include_all */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_include_all\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_include_all.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_include_all.rollup.js'] =\n            local.assetsDict['/assets.npmtest_include_all.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_include_all.__dirname + '/lib.npmtest_include_all.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-include-all/node_modules/include-all/index.js":"/**\n * Module dependencies\n */\n\nvar helpBuildDictionary = require('./lib/help-build-dictionary');\nvar helpIncludeAllSync = require('./lib/help-include-all-sync');\n\n\n/**\n * includeAll\n *\n * An easy way to include all node.js modules within a directory.\n *\n * > Used by the module loader in Sails core.\n */\n\n\n/**\n * Build a dictionary of named modules\n * (default usage-- see options in `README.md`)\n *\n * @param {Dictionary} options\n */\n\nmodule.exports = function includeAllSync(options) {\n  // This is the original, pre-v1 `include-all` usage.\n  return helpIncludeAllSync(options);\n};\n\n\n//////////////////////////////////////////////////////////////////////////////\n// The four methods below are all originally from sails-build-dictionary.\n// They are asynchronous, and besides defaulting certain options, they do a\n// handful of extra things.  So it's more than just options getting defaulted!\n//////////////////////////////////////////////////////////////////////////////\n\n\n/**\n * Build a dictionary of named modules\n * (responds with an error if the container cannot be loaded)\n *\n * WARNING: THIS PARTICULAR CONVENIENCE METHOD WILL LIKELY BE DEPRECATED.\n * (it's not actually being used anywhere in core)\n *\n * @async\n * @param {Dictionary} options\n * @param {Function} cb\n */\n\nmodule.exports.required = function(options, cb) {\n  return helpBuildDictionary(options, cb);\n};\n\n\n\n/**\n * Build a dictionary of named modules\n * (fails silently-- returns {} if the container cannot be loaded)\n *\n * @async\n * @param {Dictionary} options\n * @param {Function} cb\n */\n\nmodule.exports.optional = function(options, cb) {\n  options.optional = true;\n  return helpBuildDictionary(options, cb);\n};\n\n\n\n/**\n * Build a dictionary indicating whether the matched modules exist\n * (fails silently-- returns {} if the container cannot be loaded)\n *\n * @async\n * @param {Dictionary} options\n * @param {Function} cb\n */\n\nmodule.exports.exists = function(options, cb) {\n  options.optional = true;\n  options.dontLoad = true;\n  return helpBuildDictionary(options, cb);\n};\n\n\n\n/**\n * Build a single module dictionary by extending {} with the contents of each module\n * (fail silently-- returns {} if the container cannot be loaded)\n *\n * @async\n * @param {Dictionary} options\n * @param {Function} cb\n */\n\nmodule.exports.aggregate = function(options, cb) {\n  options.aggregate = true;\n  options.optional = true;\n  return helpBuildDictionary(options, cb);\n};\n\n\n\n\n//////////////////////////////////////////////////////////////////////////////\n// Finally, this last method is sort of like a recursive `ls`.\n// Similarly, it's more or less just a synchronous version of `.exists()`,\n// but with a few more specific hard-coded overrides.\n//////////////////////////////////////////////////////////////////////////////\n\n\n/**\n * Build a flat dictionary of the matched modules, where the keys are the\n * paths, and the values are `true` (fails silently-- returns {} if the\n * container cannot be loaded)\n *\n * @param {Dictionary} options\n * @returns {Dictionary}\n */\n\nmodule.exports.scanSync = function(options) {\n\n  // Higher level overrides.\n  options.flatten = true;\n  options.keepDirectoryPath = true;\n\n  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n  // Note: the combination of the following overrides make this\n  // more or less equivalent to `.exists()`-- but synchronous.\n  // Not all options work... instead, this is really designed\n  // for a slightly different kind of use case-- where you want\n  // to recursively, synchronously stat modules, rather than\n  // include them.\n  options.optional = true;\n  options.dontLoad = true;\n  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n  // Finally, some defaults:\n  if (!options.excludeDirs) {\n    options.excludeDirs = /^\\.(git|svn)$/;\n  }\n  if (!options.depth) {\n    options.depth = 10;\n  }\n  if (!options.filter) {\n    options.filter = /(.+)$/;\n  }\n\n  // Now call the low-lvl helper.\n  return helpIncludeAllSync(options);\n};\n\n","/home/travis/build/npmtest/node-npmtest-include-all/node_modules/include-all/lib/help-build-dictionary.js":"/**\n * Module dependencies\n */\n\nvar path = require('path');\nvar _ = require('@sailshq/lodash');\nvar mergeDictionaries = require('merge-dictionaries');\nvar helpIncludeAllSync = require('./help-include-all-sync');\n\n\n\n/**\n * helpBuildDictionary()\n *\n * A helper.\n *\n * Build a dictionary of \"identifiable\" modules.\n *\n * Go through each module in the source directory according to these options.\n * This primarily relies on include-all, with a few extra bits of logic, including\n * the determination of each module's \"identity\".  Tolerates non-existent files/directories\n * by ignoring them.\n *\n * > Note:\n * > This helper includes stronger conventions than the base includeAll usage.\n * > For example, it defaults to excluding `.git` and `.svn` folders.\n * > It also exposes extra options which are not supported by the base, synchronous includeAll.\n *\n * @param {Dictionary} options [see README.md for details]\n * @param {Function} cb\n *\n * @private\n */\nmodule.exports = function helpBuildDictionary (options, cb) {\n\n  // Defaults\n  options.replaceVal = options.replaceVal || '';\n\n  // Deliberately exclude source control directories\n  if (!options.excludeDirs) {\n    options.excludeDirs = /^\\.(git|svn)$/;\n  }\n\n  var files;\n  try {\n    files = helpIncludeAllSync(options);\n  } catch (e) { return cb(e); }\n\n  // Start building the module dictionary\n  var dictionary = {};\n\n  // Iterate through each module in the set\n  try {\n    _.each(files, function (module, filename) {\n\n      // Build the result dictionary by merging all of the target modules.\n      // Note: Each module must export a dictionary in order for this to work\n      // (e.g. for building a configuration dictionary from a set of config files)\n      if (options.aggregate) {\n\n        // Check that source module is a valid dictionary\n        if (!_.isPlainObject(module)) {\n          throw new Error('When using `aggregate`, modules must export dictionaries.  But module (`'+filename+'`) is invalid:' + module);\n        }\n\n        // Merge module into dictionary, using our custom merge strategy for the merge-dictionaries module\n        // to prevent issues with empty dictionaries and arrays (see highlvl \"edge case\" tests)\n        mergeDictionaries(dictionary, module);\n\n        return;\n      }\n\n      // Keyname is how the module will be identified in the returned module tree\n      var keyName = filename;\n\n      // If a module is found but marked as `undefined`,\n      // don't actually include it (since it's probably unusable)\n      if (typeof module === 'undefined') {\n        return;\n      }\n\n      // Normal case behavior:\n      // (i.e. unless the `identity` option is explicitly disabled,\n      //  or if `dontLoad` is set)\n      if (!options.dontLoad && options.identity !== false) {\n\n        // If no `identity` property is specified in module, infer it from the filename\n        if (!module.identity) {\n          if (options.replaceExpr) {\n            module.identity = filename.replace(options.replaceExpr, options.replaceVal);\n          }\n          else {\n            module.identity = filename;\n          }\n        }\n\n        // Ensure that the identity and globalId always use forward slashes (\"/\") for their\n        // path separators, even on Windows.  This is so that identities are more clean and\n        // predictable.\n        // (see https://nodejs.org/dist/latest-v0.10.x/docs/api/path.html#path_path_sep)\n        if (path.sep === '\\\\') {\n          module.identity = module.identity.replace(/\\\\/g, '/');\n        }\n\n        // globalId is the name of the variable for this module\n        // that e.g. will be exposed globally in Sails unless configured otherwise.\n\n        // Generate `globalId` using the original value of module.identity\n        if (!module.globalId) {module.globalId = module.identity;}\n\n        // `identity` is the all-lowercase version\n        module.identity = module.identity.toLowerCase();\n\n        // Use the identity for the key name\n        keyName = options.useGlobalIdForKeyName ? module.globalId : module.identity;\n      }\n\n      if (dictionary[keyName] && !options.allowDuplicateKeys) {\n        var e = new Error('Duplicate filename detected: `include-all` attempted to load two files named `' + keyName + '` (case-insensitive).');\n        e.code = 'include-all:DUPLICATE';\n        e.duplicateIdentity = keyName;\n        throw e;\n      }\n\n      // >-\n      // Now save the module's contents (or `true`, if the `dontLoad` option is set)\n      // in our dictionary.\n      dictionary[keyName] = module;\n    });//</each key/module pair in the module map>\n  } catch (e) { return cb(e); }\n\n  // Always return at least an empty dictionary\n  dictionary = dictionary || {};\n\n  return cb(undefined, dictionary);\n};\n","/home/travis/build/npmtest/node-npmtest-include-all/node_modules/include-all/lib/help-include-all-sync.js":"/**\n * Module dependencies\n */\n\nvar path = require('path');\nvar fs = require('fs');\nvar _ = require('@sailshq/lodash');\n\n\n\n/**\n * helpIncludeAllSync()\n *\n * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n * @required {String} dirname\n *           The initial directory.\n *\n * @optional {RegExp} filter\n *           A regular expression used to filter modules by filename.\n *\n * @optional {RegExp} excludeDirs\n *           A regular expression used to EXCLUDE directories by name.\n *           (the opposite of `filter`)\n *\n * @optional {Array} exclude\n *           An array of regular expressions used to certain EXCLUDE relative paths.\n *           (the opposite of the old `pathFilter`)\n *\n * @optional {Number} depth\n *           The maximum depth to traverse.  A depth of `1` means only the top-level contents of the initial directory will be returned.\n *           By default, there is no max depth (it is infinite).\n *\n * @optional {Boolean} optional\n *           If set, then if an error is thrown when attempting to list directory contents, ignore it, fail silently, and continue.\n *           @default false\n *\n * @optional {Boolean} ignoreRequireFailures\n *           If set, then if an error is thrown when attempting to require a module, ignore the error, fail silently, and continue.\n *           @default false\n *\n * @optional {Boolean} dontLoad\n *           If set, then just set the right-hand side in the dictionary to `true` (rather than a module reference).\n *           @default false\n *\n * @optional {Boolean} force\n *           When set, any past require cache entry will be cleared before re-requiring a module.\n *           @default true\n *\n * @optional {Boolean} keepDirectoryPath\n *           See README\n *           Note that `flatten` must also be set to `true` for this to work.\n *           @default false\n *\n * @optional {Boolean} flatten\n *           See README\n *           @default false\n *\n * @optional {Boolean} markDirectories\n *           TODO: document or deprecate (pretty sure it's the latter)\n *           @default false\n *\n * @optional {Boolean} allowDuplicateKeys\n *           When set, duplicate keys will override each other.  Otherwise, duplicate keys will result in an error.\n *           @default false\n *\n * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n * @return {Dictionary}\n *         A dictionary containing all the modules that were loaded.\n *         Keys are filenames and values are either module references\n *         or `true` (if `dontLoad` was passed in.)\n *\n * For example, this might return:\n *\n * ```\n * {\n *   api: {\n *     controllers: {\n *       UserController: { find: function (req, res) {} },\n *       PetController: { create: function (req, res) {} },\n *     },\n *     models: {\n *       User: { schema: false },\n *       Pet: { attributes: {} },\n *     },\n *     policies: {\n *       isLoggedIn: function (req, res) {}\n *     },\n *   }\n * }\n * ```\n *\n * OR it might return:\n *\n * ```\n * {\n *   api: {\n *     controllers: {\n *       UserController: true,\n *       PetController: true\n *     },\n *     models: {\n *       User: true,\n *       Pet: true\n *     },\n *     policies: {\n *       isLoggedIn: true\n *     }\n *   }\n * }\n * ```\n */\n\nmodule.exports = function includeAll(options) {\n  options = options || {};\n\n  // Assertions about usage\n  if (typeof options.dirname === 'undefined') {\n    throw new Error('`dirname` is required');\n  }\n  if (typeof options.filter !== 'undefined' && (typeof options.filter !== 'object' || options.filter === null)) {\n    throw new Error('If specified, `filter` must be a RegExp.');\n  }\n  if (typeof options.excludeDirs !== 'undefined' && (typeof options.excludeDirs !== 'object' || options.excludeDirs === null)) {\n    throw new Error('If specified, `excludeDirs` must be a RegExp.');\n  }\n  if (typeof options.exclude !== 'undefined' && (typeof options.exclude !== 'object' || options.exclude === null)) {\n    throw new Error('If specified, `exclude` must be an array of RegExps.');\n  }\n  // Deprecations:\n  if (typeof options.flattenDirectories !== 'undefined') {\n    throw new Error('As of include-all v1.0.1, `flattenDirectories` was replaced with `flatten`.  See https://github.com/balderdashy/include-all#options for more information.');\n  }\n\n\n  // Sane defaults:\n  if (typeof options.force === 'undefined') {\n    options.force = true;\n  }\n  if (!options.filter) {\n    options.filter = /(.*)/;\n  }\n\n  // For readability in the code below, track the initial \"dirname\" as a local\n  // variable called `contextPath`.\n  //\n  // Here, we also ensure that it is an absolute path.\n  var contextPath = path.resolve(options.dirname);\n\n\n  // Define and invoke a self-calling recursive function.\n  var modules = (function _recursivelyIncludeAll(thisDirname, _depth){\n\n    var _modules = {};\n\n    // Bail out if our counter has reached the desired depth\n    // originally indicated by the user in `options.depth`.\n    if (typeof options.depth !== 'undefined' && _depth >= options.depth) {\n      return;\n    }\n\n    // List files in the specified directory.\n    var files;\n    try {\n      files = fs.readdirSync(thisDirname);\n    }\n    catch (e) {\n      if (options.optional) { return {}; }\n      else {\n        var dirNotFoundErr = new Error('`include-all` could not scan directory (`' + thisDirname + '`) could not be scanned for files.\\nDetails:' + e.stack);\n        dirNotFoundErr.code = 'include-all:DIRECTORY_NOT_FOUND';\n        dirNotFoundErr.originalError = e;\n        throw dirNotFoundErr;\n      }\n    }\n\n\n    // Iterate through files in the current directory\n    files.forEach(function (file) {\n\n      var filepath = path.join(thisDirname, file);\n      // `path.join()` does not preserve `./`-- but since that\n      // symbols has a special meaning when at the beginning of\n      // a `require()` path, we bring it back here.\n      if (thisDirname.match(/^\\.\\//) && !filepath.match(/^\\.\\//)) {\n        filepath = './' + filepath;\n      }\n\n      // Get the relative path of this module.\n      // (i.e. peel off just the relative path -- remove the initial dirname)\n      var relativePath = path.relative(contextPath, filepath);\n\n      // Relative path \"exclude\" filter (blacklist)\n      if (options.exclude) {\n        var shouldBeExcluded = _.any(options.exclude, function (regexp) {\n          return relativePath.match(regexp);\n        });\n        if (shouldBeExcluded) { return; }\n      }\n\n      // For directories, continue to recursively include modules\n      if (fs.statSync(filepath).isDirectory()) {\n\n        // Ignore explicitly excluded directories\n        if (options.excludeDirs && file.match(options.excludeDirs)) { return; }\n\n        // Recursively call `_recursivelyIncludeAll` on this child directory.\n        var descendantModules = _recursivelyIncludeAll(\n          filepath, // new dirname for recursive step\n          _depth+1  // new depth for recursive step\n        );\n\n        // If we're flattening, then fold _our_ direct child modules\n        // (grandchildren, if you will) onto ourselves.\n        if (options.flatten) {\n          _.each(descendantModules, function (rhs, grandchildKey){\n\n            if (options.keepDirectoryPath) {\n              _modules[path.join(path.basename(relativePath), grandchildKey)] = rhs;\n            }\n            else {\n              if (_modules[grandchildKey]) { throw new Error('Attempting to flatten modules but duplicate key detected (`'+grandchildKey+'`).  Enable `keepDirectoryPath: true` to enable namespacing based on hierarchy.'); }\n              _modules[grandchildKey] = rhs;\n            }\n          });//</each key in dictionary of all descendant module>\n        }\n        // Otherwise, we're leaving things denormalized.\n        else {\n          _modules[file] = descendantModules;\n        }\n\n      }//</if (this is a directory)>\n\n      // Otherwise, this is a file.\n      // So we'll go ahead and add a key for it in our module map.\n      else {\n\n        // Key name for module.\n        var keyName;\n\n        // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n        // For debugging:\n        //\n        // console.log('contextPath:',contextPath);\n        // console.log('file:',file);\n        // console.log('filepath:',filepath);\n        // console.log('relativePath:',relativePath);\n        // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n        // Filename \"include\" filter (whitelist)\n        // Note that this also identifies the appropriate key name.\n        if (options.filter) {\n          var match = file.match(options.filter);\n          if (!match) { return; }\n          keyName = match[1];\n        }\n\n        // If `dontLoad` is true, then don't load anything--\n        // instead just set the RHS to `true`.\n        if (options.dontLoad) {\n          _modules[keyName] = true;\n        }\n        // Otherwise, dontLoad is falsey (the default), so we'll load\n        // this module into memory using `require()`\n        else {\n\n          // If `force: true` was set, remove the module from the require()\n          // cache, along with any modules that the module `required()`\n          if (options.force) {\n            var resolved = require.resolve(filepath);\n            // First, see if the item is actually cached.\n            if (require.cache[resolved]) {\n              // If so, add it to a stack of modules to remove.\n              var modulesToRemove = [require.cache[resolved]];\n              // While there are items in the stack...\n              while (modulesToRemove.length) {\n                // Pop a module off the stack.\n                var moduleToRemove = modulesToRemove.pop();\n                // Add its children to the stack.\n                var children = (require.cache[moduleToRemove.id] && require.cache[moduleToRemove.id].children) || [];\n                // Don't clear compiled node modules from the cache.\n                children = _.reject(children, function(child) {\n                  return child.id.match(/\\.node$/);\n                });\n                modulesToRemove = modulesToRemove.concat(children);\n                // Delete the module from the cache.\n                delete require.cache[moduleToRemove.id];\n              }\n            }\n          }\n\n          // Require the module.\n          try {\n            _modules[keyName] = require(filepath);\n          } catch (e) {\n            // Skip this module silently if `ignoreRequireFailures` is enabled.\n            if (options.ignoreRequireFailures) { return; }\n            else {\n              var err = new Error('Attempted to `require(\\''+filepath+'\\')`, but an error occurred:\\n--\\n' + e.stack + '\\n--');\n              err.code = 'include-all:COULD_NOT_REQUIRE';\n              err.raw = e;\n              err.filepath = filepath;\n              throw err;\n\n              // Note: In Node v4.x, an unhandled exception is necessary in order to actually\n              // see where the problem from the syntax error occurred.  (Otherwise, you just see\n              // `exports.runInThisContext` in the stack trace, which is less than helpful!)\n            }\n          }//</catch>\n        }\n\n      }//</else (this is a file)>\n    });//</each direct child inode in this directory>\n\n\n    // Pass these modules back to the previous recursive step.\n    return _modules;\n  })(contextPath, 0);//</initial call to self-calling, recursive function>\n  // ^set up dirname, and start the depth counter at 0\n\n\n  // Now that all modules have been gathered up, pass map of modules back to userland code.\n  return modules;\n\n};\n"}